% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trainNMF.R
\name{trainNMF}
\alias{trainNMF}
\alias{trainNMF,SingleCellExperiment,ANY-method}
\alias{trainNMF,ANY,SingleCellExperiment-method}
\alias{trainNMF,ANY,SpatialExperiment-method}
\alias{trainNMF,Seurat,ANY-method}
\alias{trainNMF,ANY,Seurat-method}
\alias{trainNMF,ANY,matrix-method}
\alias{trainNMF,matrix,ANY-method}
\alias{trainNMF,ANY,DelayedMatrix-method}
\alias{trainNMF,DelayedMatrix,ANY-method}
\alias{trainNMF,ANY,ANY-method}
\alias{trainNMF,dgCMatrix,dgCMatrix-method}
\title{train NMF model}
\usage{
\S4method{trainNMF}{SingleCellExperiment,ANY}(
  x,
  y,
  ...,
  assay = "counts",
  groups = colLabels(x, onAbsence = "error")
)

\S4method{trainNMF}{ANY,SingleCellExperiment}(x, y, ..., assay = "counts")

\S4method{trainNMF}{ANY,SpatialExperiment}(x, y, ..., assay = "counts")

\S4method{trainNMF}{Seurat,ANY}(x, y, ..., slot = "counts", assay = "RNA", groups = Idents(x))

\S4method{trainNMF}{ANY,Seurat}(x, y, ..., slot = "counts", assay = "RNA")

\S4method{trainNMF}{ANY,matrix}(x, y, ..., slot = "counts", assay = "RNA")

\S4method{trainNMF}{matrix,ANY}(x, y, ..., slot = "counts", assay = "RNA")

\S4method{trainNMF}{ANY,DelayedMatrix}(x, y, ..., slot = "counts", assay = "RNA")

\S4method{trainNMF}{DelayedMatrix,ANY}(x, y, ..., slot = "counts", assay = "RNA")

\S4method{trainNMF}{ANY,ANY}(x, y, ...)

\S4method{trainNMF}{dgCMatrix,dgCMatrix}(
  x,
  y,
  groups,
  mgs,
  pnmf = c("RcppML", "NMF"),
  n_top = NULL,
  gene_id = "gene",
  group_id = "cluster",
  weight_id = "weight",
  hvg = NULL,
  model = c("ns", "std"),
  scale = TRUE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{x, y}{single-cell and mixture dataset, respectively. Can be a
numeric matrix, \code{SingleCellExperiment} or \code{SeuratObjecy}.}

\item{...}{additional parameters.}

\item{assay}{if the object is of Class \code{Seurat}, character string
specifying the assay from which to extract the expression matrix.
  By default "RNA".}

\item{groups}{vector of group labels for cells in \code{x}.
When \code{x} is a \code{SingleCellExperiment} or \code{SeuratObject},
defaults to \code{colLabels} and \code{Idents(x)}, respectively.}

\item{slot}{if the object is of Class \code{Seurat}, character string
specifying the slot from which to extract the expression matrix. If the
object is of class \code{SingleCellExperiment} indicates matrix to use.
By default "counts".}

\item{mgs}{\code{data.frame} or \code{DataFrame} of marker genes.
Must contain columns holding gene identifiers, group labels and
the weight (e.g., logFC, -log(p-value) a feature has in a given group.}

\item{pnmf}{character vector specifying which from which package to grab
\code{nmf()}. It can be either \code{RcppML} (default) or \code{NMF}.}

\item{n_top}{integer scalar specifying the number of markers to select per
group. By default NULL uses all the marker genes to initialize the model.}

\item{gene_id, group_id, weight_id}{character specifying the column
in \code{mgs} containing gene identifiers, group labels and weights,
respectively.}

\item{hvg}{character vector containing hvg to include in the model.
By default NULL.}

\item{model}{character string indicating which model to use when running nmf
from the NMF. Either "ns" (default) or "std".}

\item{scale}{logical specifying whether to scale single-cell counts to unit
variance. This gives the user the option to normalize the data beforehand
as you see fit (CPM, FPKM, ...) when passing a matrix or specifying the
slot from where to extract the count data.}

\item{verbose}{logical. Should information on progress be reported?}
}
\value{
base a list where the first element is an \code{NMFfit} object and
  the second is a matrix contatining the topic profiles learnt.
}
\description{
This is the training function used by SPOTLight. This function
  takes in single cell expression data, trains the model and learns topic
   profiles for each cell type
}
\examples{
set.seed(321)
# mock up some single-cell, mixture & marker data
sce <- mockSC(ng = 200, nc = 10, nt = 3)
spe <- mockSP(sce)
mgs <- getMGS(sce)

res <- trainNMF(
    x = sce,
    y = spe,
    groups = sce$type,
    mgs = mgs,
    weight_id = "weight",
    group_id = "type",
    gene_id = "gene")
# Get NMF model
res[["mod"]]
# Get topic profiles
res[["topic"]]
}
\author{
Marc Elosua Bayes & Helena L Crowell
}
